{
  "version": 3,
  "sources": ["browser-external:assert", "browser-external:fs/promises", "../../validate-image-type/src/image-type.ts", "../../validate-image-type/src/isBinary.ts", "../../validate-image-type/src/validate-image-type.ts"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"assert\" has been externalized for browser compatibility. Cannot access \"assert.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"fs/promises\" has been externalized for browser compatibility. Cannot access \"fs/promises.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "const supportedImageTypes = [\n    \"jpg\",\n    \"png\",\n    \"gif\",\n    \"webp\",\n    \"flif\",\n    \"cr2\",\n    \"tif\",\n    \"bmp\",\n    \"jxr\",\n    \"psd\",\n    \"ico\",\n    \"bpg\",\n    \"jp2\",\n    \"jpm\",\n    \"jpx\",\n    \"heic\",\n    \"cur\",\n    \"dcm\",\n    \"avif\"\n];\nexport type SupportedImageTypes = (typeof supportedImageTypes)[number];\nconst imageExts = new Set(supportedImageTypes);\n\nexport const imageType = async (buffer: Buffer | Uint8Array | ArrayBuffer): Promise<SupportedImageTypes | null> => {\n    const { fileTypeFromBuffer } = await import(\"file-type\");\n    const ret = await fileTypeFromBuffer(buffer);\n    if (!ret) {\n        return null;\n    }\n    return imageExts.has(ret.ext) ? ret.mime : null;\n};\n", "export const BINARY_READ_LENGTH = 24;\nexport const isBinary = (buffer: Buffer): boolean => {\n    for (let i = 0; i < BINARY_READ_LENGTH; i++) {\n        const characterCode = buffer[i];\n        if (characterCode === 65533 || characterCode <= 8) {\n            return true;\n        }\n    }\n    return false;\n};\n", "import assert from \"assert\";\nimport * as fs from \"fs/promises\";\nimport { imageType } from \"./image-type\";\nimport { BINARY_READ_LENGTH, isBinary } from \"./isBinary\";\n\nexport type ValidateImageTypeOptions = {\n    /**\n     * Original file name\n     * if the `filePath` is temporary random file path, validator use the `originalFilename` instead of `filePath`\n     */\n    originalFilename?: string;\n    /**\n     * Allow mime-type lists\n     * Example ['image/jpeg', 'image/gif', 'image/png', 'image/svg+xml']\n     */\n    allowMimeTypes: string[];\n};\n\nexport type ValidateImageResult = {\n    ok: boolean;\n    error?: Error;\n};\n\n/**\n * Detect the image type of Buffer or Uint8Array\n * This check is based on https://github.com/sindresorhus/image-type\n */\nexport async function validateBufferMIMEType(\n    buffer: Buffer,\n    options: ValidateImageTypeOptions\n): Promise<ValidateImageResult> {\n    const mimeTypes = options.allowMimeTypes;\n    assert.ok(\n        Array.isArray(mimeTypes) && mimeTypes.every((mimeType) => mimeType.includes(\"/\")),\n        `Should be set an array of mimeType. e.g.) ['image/jpeg']`\n    );\n    const allowSVG = mimeTypes.includes(\"image/svg+xml\");\n    if (allowSVG) {\n        const { default: isSvg } = await import(\"is-svg\");\n        if (isSvg(String(buffer))) {\n            return {\n                ok: true,\n                error: undefined\n            };\n        }\n    }\n    const imageTypeMime = await imageType(buffer);\n    if (!imageTypeMime) {\n        return {\n            ok: false,\n            error: new Error(\n                `This buffer is not supported image. allowMimeTypes: ${JSON.stringify(mimeTypes)}` +\n                    (options.originalFilename ? `, filename: ${options.originalFilename}` : \"\")\n            )\n        };\n    }\n    const isAllowed = mimeTypes.includes(imageTypeMime);\n    if (!isAllowed) {\n        return {\n            ok: false,\n            error: new Error(\n                `This buffer is disallowed image MimeType: ${imageTypeMime}, allowMimeTypes: ${JSON.stringify(\n                    mimeTypes\n                )}` + (options.originalFilename ? `,filename: ${options.originalFilename}` : \"\")\n            )\n        };\n    }\n    return {\n        ok: true,\n        error: undefined\n    };\n}\n\n/**\n * Detect the image type of filePath\n * @example\n *\n * ```\n * const validationResult = validateMIMEType(\"test.png\", {\n *     allowMimeTypes: ['image/jpeg', 'image/gif', 'image/png', 'image/svg+xml']\n * });\n * if(validationResult) {\n *   console.error(validationResult)\n * }\n * ```\n */\nexport async function validateMIMEType(\n    filePath: string,\n    options: ValidateImageTypeOptions\n): Promise<ValidateImageResult> {\n    const { readChunk } = await import(\"read-chunk\");\n    // Use head buffer for performance reason\n    const buffer = await readChunk(filePath, {\n        startPosition: 0,\n        length: BINARY_READ_LENGTH\n    });\n    if (!isBinary(buffer)) {\n        const mimeTypes = options.allowMimeTypes;\n        // Handle SVG as special case\n        // https://github.com/sindresorhus/is-svg\n        const allowSVG = mimeTypes.includes(\"image/svg+xml\");\n        if (allowSVG) {\n            const { default: isSvg } = await import(\"is-svg\");\n            // if the content is not binary, read all content and check it\n            // Note: Require 128 bytes at least one\n            const content = await fs.readFile(filePath, \"utf-8\");\n            if (!isSvg(content)) {\n                return {\n                    ok: false,\n                    error: new Error(\n                        `This file is not svg. allowMimeTypes: ${JSON.stringify(mimeTypes)}` +\n                            (options.originalFilename ? `, filename: ${options.originalFilename}` : \"\")\n                    )\n                };\n            }\n            return {\n                ok: true\n            };\n        }\n    }\n    return validateBufferMIMEType(buffer, options);\n}\n"],
  "mappings": "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",
  "names": []
}
